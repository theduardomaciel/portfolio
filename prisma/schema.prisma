generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
    relationMode      = "prisma"
}

model Guest {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name      String
    image_url String?
    email     String  @unique

    readingList Post[] @relation(name: "inListOf")
    likedPosts  Post[] @relation(name: "likedBy")

    @@map("guests")
}

model Post {
    slug String @id @db.VarChar(128)

    views    BigInt  @default(1)
    likedBy  Guest[] @relation(name: "likedBy")
    inListOf Guest[] @relation(name: "inListOf")

    @@map("views")
}

model ProjectStatus {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name   String
    url    String
    status Status

    hasDependencies Boolean @default(true)

    incidents Incident[]

    @@map("project_statuses")
}

enum Status {
    ACTIVE
    INACTIVE
    MAINTENANCE
}

model Incident {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    resolved  Boolean       @default(false)
    level     IncidentLevel
    locations Json?
    logs      Log[]

    project         ProjectStatus @relation(fields: [projectStatusId], references: [id])
    projectStatusId String

    @@index([projectStatusId])
    @@map("incidents")
}

enum IncidentLevel {
    MINOR
    MAJOR
    CRITICAL
}

model Log {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    tag         LogTag
    description String

    Incident   Incident @relation(fields: [incidentId], references: [id])
    incidentId String

    @@index([incidentId])
    @@map("logs")
}

enum LogTag {
    INVESTIGATING
    IDENTIFIED
    MONITORING
    RESOLVED
}
