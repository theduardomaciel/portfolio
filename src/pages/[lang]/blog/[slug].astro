---
import BaseLayout from "@layouts/BaseLayout.astro";
import "@styles/post.css";

import Svg from "@jasikpark/astro-svg-loader";

// Components
import Footer from "@components/Footer/Footer.astro";
import Header from "@components/Header/Header.astro";
import PostPreview from "@components/Post/PostPreview.astro";

import LikeButton from "@components/Post/Buttons/LikeButton";
import ShareButton from "@components/Post/Buttons/ShareButton";

import ArticleSchema from "@components/seo/ArticleSchema.astro";

// Data
import { getAllTags, getPostBySlug } from "src/lib/sanity/api";
import PortableText from "@components/PortableText.astro";
import getSanityImageURL from "src/lib/sanity/getSanityImageUrl";
import getTagsFromPost from "src/lib/sanity/getTagsFromPost";

import { getPostDataBySlug } from "../../api/post/[slug]";
import { getGuestFromId } from "../../api/guest/index";
import BookmarkButton from "@components/Post/Buttons/BookmarkButton";

const { slug, lang } = Astro.params;
const post = await getPostBySlug(slug as string);

if (!post) {
    return Astro.redirect("/404");
}

const postData = await getPostDataBySlug(slug!);

const allTags = await getAllTags();
const tags = getTagsFromPost(allTags, post.categories);

const guestId = Astro.cookies.get("guest.id")?.value;
const guest = (await getGuestFromId(guestId as string)) as any;

const likedPostsSlugs = guest?.likedPosts.map(
    (likedPost: any) => likedPost.slug
);
const hasLiked = likedPostsSlugs?.includes(post.slug.current);

const markedPostsSlugs = guest?.readingList.map(
    (postInList: any) => postInList.slug
);
const hasMarked = markedPostsSlugs?.includes(post.slug.current);

export const prerender = false;

import { useTranslations } from "src/i18n/utils";
import type { translations } from "src/i18n/utils";

const t = useTranslations(lang as keyof typeof translations).blog;

const title = post[`title_${lang?.replace("-", "_")}`] ?? post.title;
const body = post[`body_${lang?.replace("-", "_")}`] ?? post.body;

const date = new Date(post.publishedAt);
const formattedDate = date.toLocaleDateString(lang, {
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
});

const splittedBody = body.slice(0, 160);

const seo = {
    title: title,
    description: splittedBody,
    image: post.mainImage
        ? getSanityImageURL(post.mainImage).width(1200).url()
        : undefined,
};
---

<BaseLayout seo={seo}>
    <Fragment>
        <ArticleSchema {...seo} />
    </Fragment>
    <Header isStatic={true} />
    <main class="post">
        <nav>
            <div class="subtitle">
                <p style="font-size: 3.6rem;">{t.title}</p>
                <div></div>
            </div>
            <a href={`/${lang}/blog`} class="back">
                <Svg
                    src={import("@assets/icons/left_arrow.svg?raw")}
                    aria-label={"Back arrow"}
                />
                {t}
            </a>
        </nav>
        <div class="holder">
            <div class="content">
                <a href={`/${lang}/blog`} class="back desktop">
                    <Svg
                        src={import("@assets/icons/left_arrow.svg?raw")}
                        aria-label={"Back arrow"}
                    />
                    {t.return_button}
                </a>
                <header>
                    <section class="info">
                        <div class="iconHolder icon">
                            <Svg
                                width={16}
                                src={import("@assets/icons/calendar.svg?raw")}
                                aria-label={"Calendar icon"}
                            />
                            {formattedDate}
                        </div>
                        <div class="divisor"></div>
                        <div class="iconHolder">
                            <Svg
                                width={16}
                                src={import("@assets/icons/view.svg?raw")}
                                aria-label={"Eye icon"}
                            />
                            {postData?.views || "--"}
                        </div>
                        <div class="divisor"></div>
                        <div class="iconHolder">
                            <Svg
                                width={16}
                                src={import("@assets/icons/like.svg?raw")}
                                aria-label={"Like (heart) icon"}
                            />
                            {postData?.likedBy.length || "--"}
                        </div>
                    </section>
                    <h1>{title}</h1>
                    <ul class="tags">
                        {
                            tags.map((tag: any) => (
                                <li>
                                    <a href={`/blog/category/${tag.title}`}>
                                        #{tag.title}
                                    </a>
                                </li>
                            ))
                        }
                    </ul>
                </header>
                <article class="post">
                    <PortableText text={body} />
                </article>
            </div>
            <aside>
                <div class="container shareIntegrated">
                    {
                        guestId && (
                            <div class="row">
                                <LikeButton
                                    client:load
                                    post={post}
                                    guest={guest}
                                    initialValue={hasLiked}
                                />
                                <BookmarkButton
                                    client:load
                                    post={post}
                                    guest={guest}
                                    initialValue={hasMarked}
                                />
                            </div>
                        )
                    }
                    <ShareButton client:load label={t.share} post={post} />
                </div>
                {
                    guest && guest.readingList.length > 0 && (
                        <div class="container">
                            <h6>{t.reading_list}</h6>
                            {post && post.categories && (
                                <PostPreview
                                    post={post}
                                    tags={tags}
                                    isMinimal
                                />
                            )}
                        </div>
                    )
                }
            </aside>
        </div>
        <div class="container share">
            <div class="row">
                {
                    guestId && guest && (
                        <Fragment>
                            <LikeButton
                                initialValue={hasLiked}
                                client:load
                                post={post}
                                guest={guest}
                            />
                            <BookmarkButton
                                initialValue={hasMarked}
                                client:load
                                post={post}
                                guest={guest}
                            />
                        </Fragment>
                    )
                }
                <ShareButton client:load label={t.share} post={post} />
            </div>
        </div>
    </main>
    <Footer />
</BaseLayout>
