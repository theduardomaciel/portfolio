---
import Layout from "@layouts/BaseLayout.astro";

import Header from "@components/Header/Header.astro";
import Footer from "@components/Footer/Footer.astro";

import Home from "src/sections/Home.astro";
import Projects from "src/sections/Projects";
import Experiences from "src/sections/Experiences.astro";
import Contact from "src/sections/Contact/Contact.astro";

import projects from "@assets/projects/projects.json";
import projects_es from "@assets/projects/dictionaries/es.json";
import projects_pt from "@assets/projects/dictionaries/pt-br.json";

import experiences from "@assets/experiences/experiences.json";
import experiences_es from "@assets/experiences/dictionaries/es.json";
import experiences_pt from "@assets/experiences/dictionaries/pt-br.json";

export const prerender = true;

import { defaultLang, translations } from "src/i18n/utils";
import prisma from "src/lib/prisma";
import type { JsonValue } from "@prisma/client/runtime/library";

export async function getStaticPaths() {
    let randomPhrases: JsonValue[] = [];

    try {
        randomPhrases = (await prisma.randomPhrase.findMany()).map(
            (phrase) => phrase.phrase
        );
    } catch (error) {
        console.error(error);
    }

    return Object.keys(translations).map((lang) => ({
        params: { lang },
        props: {
            response: {
                randomPhrases: randomPhrases.map((phrase) =>
                    phrase ? phrase[lang as keyof typeof phrase] : undefined
                ),
                projects:
                    lang == defaultLang
                        ? projects
                        : projects.map((project) => {
                              const { id, description, ...rest } = project;

                              const projectsDictionaries = {
                                  es: projects_es,
                                  "pt-br": projects_pt,
                              };

                              const dictionary =
                                  projectsDictionaries[
                                      lang as keyof typeof projectsDictionaries
                                  ];
                              const projectDictionary = dictionary[
                                  id as keyof typeof dictionary
                              ] as {
                                  name?: string;
                                  description: string;
                                  technologies?: {
                                      name: string;
                                      outro: string;
                                  }[];
                              };

                              return {
                                  ...rest,
                                  name: projectDictionary.name || id,
                                  description:
                                      projectDictionary.description ||
                                      description,
                                  technologies: project.technologies.map(
                                      (tech, index) => {
                                          return {
                                              ...tech,
                                              outro:
                                                  projectDictionary.technologies &&
                                                  projectDictionary.technologies.find(
                                                      (t) =>
                                                          t.name === tech.name
                                                  )?.outro,
                                          };
                                      }
                                  ),
                              };
                          }),
                experiences: experiences.map((experience) => {
                    const { id, ...rest } = experience;

                    const techsDictionaries = {
                        es: experiences_es,
                        "pt-br": experiences_pt,
                    };

                    const dictionary =
                        techsDictionaries[
                            lang as keyof typeof techsDictionaries
                        ];

                    const techDictionary =
                        dictionary && dictionary.hasOwnProperty(id)
                            ? (dictionary[id as keyof typeof dictionary] as {
                                  name?: string;
                              })
                            : {};

                    return {
                        ...rest,
                        id: techDictionary.name || id,
                    };
                }),
            },
        },
    }));
}

const { lang } = Astro.params;
const { response } = Astro.props;

const randomPhrase =
    response.randomPhrases[
        Math.floor(Math.random() * response.randomPhrases.length)
    ];
---

<script>
    document.addEventListener("DOMContentLoaded", function () {
        let lazyVideos = [].slice.call(document.querySelectorAll("video.lazy"));

        if ("IntersectionObserver" in window) {
            let lazyVideoObserver = new IntersectionObserver(function (
                entries,
                observer
            ) {
                entries.forEach(function (video: any) {
                    if (video.isIntersecting) {
                        for (let source in video.target.children) {
                            let videoSource = video.target.children[
                                source
                            ] as HTMLSourceElement;
                            if (
                                typeof videoSource.tagName === "string" &&
                                videoSource.tagName === "SOURCE"
                            ) {
                                videoSource.src = videoSource.dataset
                                    .src as string;
                            }
                        }

                        video.target.load();
                        video.target.classList.remove("lazy");
                        lazyVideoObserver.unobserve(video.target);
                    }
                });
            });

            lazyVideos.forEach(function (lazyVideo) {
                lazyVideoObserver.observe(lazyVideo);
            });
        }
    });
</script>

<Layout>
    <Header />
    <main>
        <Home randomPhrase={randomPhrase} />
        <Projects projects={response?.projects} lang={lang} client:load />
        <Experiences experiences={response?.experiences} />
        <Contact />
    </main>
    <Footer />
</Layout>
