---
import Button from "@components/Button";
import ActionButtons from "./subcomponents/ActionButtons.astro";
import SectionButton from "./subcomponents/SectionButton.astro";
import ToggleButton from "./subcomponents/ToggleButton.astro";

const SECTIONS = ["home", "projects", "tech", "contact"]; // lembra de deixar minúsculo
const isBlog = Astro.url.pathname.includes("blog");
---

<script>
    let originalSizes: { [key: string]: number } = {};

    function updateNavLine(button: HTMLElement, sectionId: string) {
        const navLine = document.getElementById("headerLine") as HTMLElement;
        /* navLine.style.left = `${button.offsetLeft}px`; */
        if (navLine) {
            const decrease = (50 / 100) * button.offsetWidth;
            const decreasedSize = button.offsetWidth - decrease; // button.offsetWidth - ((35 / 100) * button.offsetWidth)
            navLine.style.width = `${decreasedSize}px`;
            if (button && navLine) {
                navLine.style.left = `${
                    button.offsetLeft +
                    (button.offsetWidth + decrease) / 2 -
                    originalSizes[sectionId] / 2
                }px`;
            }
        }
    }

    function showNavOnScroll() {
        const header = document.getElementById("header") as HTMLElement;
        if (!header) return;
        if (window.scrollY === 0) {
            header.classList.remove("scroll");
        } else {
            header.classList.add("scroll");
        }
    }

    let lastSectionId: string = "home";
    let lastMenuSection: any = document.querySelector(
        `.menu a[title*=${lastSectionId}]`
    );

    function changeMenuSection() {
        const documentSections = [
            document.querySelector("#home"),
            document.querySelector("#projects"),
            document.querySelector("#tech"),
        ];
        const middleLine = window.scrollY + window.innerHeight / 2;

        function getCurrentSection(section: HTMLElement) {
            // Verificando em qual seção o usuário está
            // Utilizaremos o "id" da seção e obteremos o "offsetTop"
            const sectionTop = section.offsetTop;
            const sectionHeight = section.offsetHeight;

            const sectionIsAboveOrInsideMiddleLine = middleLine >= sectionTop;

            const nextSectionBegin = sectionHeight + sectionTop; // Somamos o tamanho fixo da seção com o valor da altura da seção para sabermos a localização de início da seção seguinte
            const nextSectionIsUnderMiddleLine = middleLine < nextSectionBegin;

            const isInBoundaries =
                sectionIsAboveOrInsideMiddleLine &&
                nextSectionIsUnderMiddleLine;

            if (isInBoundaries) {
                return true;
            }
        }

        documentSections.forEach((section) => {
            const lastSection = document.querySelector(`#${lastSectionId}`);
            if (section && section !== lastSection) {
                const sectionIsInBoundaries = getCurrentSection(
                    section as HTMLElement
                );
                if (sectionIsInBoundaries) {
                    const sectionId = section.getAttribute("id") as string;

                    const lastSectionButton = document.querySelector(
                        `.menu a[title*=${lastSectionId}]`
                    ) as HTMLElement;
                    if (lastSectionButton) {
                        lastSectionButton.classList.remove("active");
                    }

                    const sectionButton = document.querySelector(
                        `.menu a[title*=${sectionId}]`
                    ) as HTMLElement;
                    if (sectionButton) {
                        sectionButton.classList.add("active");
                        lastSectionId = sectionId;
                        lastMenuSection = sectionButton;
                        updateNavLine(sectionButton, sectionId);
                    }
                }
            }
        });
    }

    const handleResize = () => {
        if (lastMenuSection) {
            updateNavLine(lastMenuSection, lastSectionId);
        }
    };

    const handleScroll = () => {
        showNavOnScroll();
        changeMenuSection();
    };

    const sectionsButtons = document.querySelectorAll(
        `.menu a`
    ) as NodeListOf<HTMLElement>;
    const buttonsSizes = (Object.entries(sectionsButtons) as Array<any>).map(
        ([index, data]) => {
            data.style.width = data.offsetWidth /* + 10 */ + "px"; // Adicionando 10px para evitar que o texto se desloque quando mudar de peso - resolve o problema mas causa layout shift!!!!
            return {
                [data.getAttribute("title")]: data.offsetWidth,
            };
        }
    );

    originalSizes = Object.assign({}, ...buttonsSizes);
    const timeout = setTimeout(() => {
        updateNavLine(sectionsButtons[0], "home");
        clearTimeout(timeout);
    }, 500);

    window.addEventListener("scroll", handleScroll);
    window.addEventListener("resize", handleResize);
</script>

<header id="header" class={`header`}>
    <a class="title" href="/#">
        {`<>edu.</>`}
    </a>

    <div class="menu">
        {!isBlog && <div id="headerLine" class="sectionLine" />}
        <ul class="list">
            {
                SECTIONS.map((section, index) => (
                    <SectionButton title={section} />
                ))
            }
            <li>
                <a
                    class={`blogButton button ${isBlog ? "selected" : ""}`}
                    href="/blog">Blog</a
                >
            </li>
        </ul>
        <ActionButtons />
    </div>
    <ToggleButton />
</header>

<style>
    .header {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: space-between;

        padding-inline: 3.5rem;

        position: fixed;
        top: 0;
        width: 100vw;
        height: var(--nav-height);

        background-color: var(--secondary-01);
        transition: background-color var(--transition);
        z-index: 10;

        font-size: 2.4rem;
    }

    html[data-lod="high"] .header.scroll:not(.menuExpanded) {
        opacity: 1;
        background-color: initial;
        -webkit-backdrop-filter: blur(25px);
        backdrop-filter: blur(25px);
    }

    .title {
        font-family: "Roboto SerifVariable", "Roboto Serif";
        font-style: normal;
        font-weight: 700;
        font-size: 2.4rem;

        color: var(--primary-01);
    }

    .list .blogButton {
        display: flex;
        padding: 0.5rem 2.25rem;
        width: fit-content;
    }

    .menu {
        position: absolute;
        top: 0;
        left: 0;
        opacity: 0;

        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-between;
        padding: 4.5rem;

        height: calc(100vh - var(--nav-height));
        width: 100%;

        font-family: "Roboto SerifVariable", "Roboto Serif";

        transition: calc(var(--transition) * 2);
        transition-timing-function: cubic-bezier(0.002, 0.82, 0.165, 1);

        transform: translateY(100vh);
        transform-style: preserve-3d;
    }

    .sectionLine {
        display: none;
    }

    .header.menuExpanded .menu {
        position: fixed;
        top: var(--nav-height);

        background-color: var(--secondary-01);
        transform: translateY(0%);
        opacity: 1;
    }

    .header.menuExpanded body {
        overflow-y: hidden;
    }

    .menu .list {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 3.5rem;

        text-transform: capitalize;
        font-weight: 400;
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    @media (min-width: 1024px) {
        .header {
            padding-inline: 12.5rem;
            font-size: 1.6rem;
            height: var(--nav-height-desktop);
        }

        .title {
            font-size: 2.4rem;
        }

        .menu .sectionLine {
            display: block;
            position: absolute;

            display: block;
            position: absolute;
            bottom: 2rem;
            left: 0;
            opacity: 0;

            height: 1.5px;
            width: 25px;

            animation: fadeIn 0.35s 1s forwards;

            border-radius: 0.2rem;
            background-color: var(--primary-01);

            transition: 0.35s;
        }

        .menu {
            flex-direction: row;
            justify-content: space-between;
            gap: 7.5rem;

            position: initial;
            transform: initial;

            width: fit-content;
            height: var(--nav-height-desktop);
            padding: 0;

            opacity: 1;
        }

        .menu .list {
            flex-direction: row;
            gap: 5rem;
        }
    }
</style>
