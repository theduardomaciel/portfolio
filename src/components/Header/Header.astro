---
import Svg from "@jasikpark/astro-svg-loader";

import ActionButtons from "./subcomponents/ActionButtons.astro";
import SectionButton from "./subcomponents/SectionButton.astro";
import ToggleButton from "./subcomponents/ToggleButton.astro";

const isBlog = Astro.url.pathname.includes("blog");
const isStatus = Astro.url.pathname.includes("status");

const { isStatic } = Astro.props;

import { getLangFromUrl, useTranslations } from "@/i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const { pathname } = Astro.url;

const SECTIONS = [
    {
        name: t.nav.home,
        id: "home",
        href: `/`,
    },
    {
        name: t.nav.projects,
        id: "projects",
        href: `/${lang}/#projects`,
    },
    {
        name: t.nav.tech,
        id: "tech",
        href: `/${lang}/#tech`,
    },
    {
        name: "Status",
        id: "status",
        href: `/${lang}/status`,
    },
];
---

<script>
    let button: HTMLElement | null =
        document.getElementById("sectionButton-home");

    const sections = [
        document.getElementById("home"),
        document.getElementById("projects"),
        document.getElementById("tech"),
    ];

    function updateNavLine() {
        if (!button) return;

        const navLine = document.getElementById("headerLine") as HTMLElement;
        if (navLine) {
            const decrease = (50 / 100) * button.offsetWidth;
            const decreasedSize = button.offsetWidth - decrease; // button.offsetWidth - ((35 / 100) * button.offsetWidth)
            navLine.style.width = `${decreasedSize}px`;
            if (button && navLine) {
                navLine.style.left = `${button.offsetLeft + decrease / 2}px`;
            }
        }
    }

    function showNavOnScroll() {
        const header = document.getElementById("header") as HTMLElement;
        if (!header) return;
        if (window.scrollY === 0) {
            header.classList.remove("scroll");
        } else {
            header.classList.add("scroll");
        }
    }

    function changeMenuSection() {
        const middleLine = window.scrollY + window.innerHeight / 2;

        function getCurrentSection(section: HTMLElement) {
            const sectionTop = section.offsetTop;
            const sectionHeight = section.offsetHeight;

            const sectionIsAboveOrInsideMiddleLine = middleLine >= sectionTop;

            // Somamos o tamanho fixo da seção com o valor da altura da seção para sabermos a localização de início da seção seguinte
            const nextSectionBegin = sectionHeight + sectionTop;
            const nextSectionIsUnderMiddleLine = middleLine < nextSectionBegin;

            const isInBoundaries =
                sectionIsAboveOrInsideMiddleLine &&
                nextSectionIsUnderMiddleLine;

            if (isInBoundaries) {
                return true;
            }
        }

        // Iteramos por todas as seções presentes na página
        sections.forEach((documentSection) => {
            const sectionButton = document.getElementById(
                `sectionButton-${documentSection?.id}`
            ) as HTMLElement;

            if (
                documentSection &&
                sectionButton &&
                button &&
                sectionButton !== button
            ) {
                // Verificamos se o usuário está na seção atual
                if (getCurrentSection(documentSection)) {
                    ///console.log("is in section", documentSection.id);
                    button.classList.remove("active");
                    sectionButton.classList.add("active");
                    button = sectionButton;
                } else {
                    // O usuário entrou na página e está no topo
                    button.classList.add("active");
                }
                updateNavLine(); // Atualizamos a linha do menu
            }
        });
    }

    const handleResize = () => {
        updateNavLine();
    };

    const handleScroll = () => {
        showNavOnScroll();
        changeMenuSection();
    };

    changeMenuSection(); // Atualizamos a seção atual

    // Exibimos a linha no header
    document.getElementById("headerLine")?.classList.add("enabled");

    window.addEventListener("scroll", handleScroll);
    window.addEventListener("resize", handleResize);
</script>

<header id="header" class={`header ${isStatic ? "static" : ""}`}>
    <a class="title" href={`/${lang}`}>
        <Svg src={import("/name.svg?raw")} height={20} />
    </a>

    <div id="menu" class="menu">
        {!isBlog && !isStatus && <div id="headerLine" class="sectionLine" />}
        <ul class="list">
            {
                SECTIONS.map((section, _) => (
                    <SectionButton pathname={pathname} section={section} />
                ))
            }
            <li>
                <a
                    rel="prefetch"
                    class={`blogButton button ${isBlog ? "selected" : ""}`}
                    href={`/${lang}/blog`}>Blog</a
                >
            </li>
        </ul>
        <ActionButtons />
        <div class="mobile_spacing"></div>
    </div>
    <ToggleButton />
</header>

<style>
    .header {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: space-between;

        padding-inline: var(--margin);

        position: fixed;
        top: 0;
        width: 100%;
        height: var(--nav-height);

        transition: background-color var(--transition);
        z-index: 10;

        font-size: 2.4rem;
    }

    .header.static {
        position: absolute;
    }

    html[data-lod="high"] .header.scroll:not(.menuExpanded):not(.static) {
        opacity: 1;
        background-color: rgba(255, 255, 255, 0.5);
        -webkit-backdrop-filter: blur(25px);
        backdrop-filter: blur(25px);
    }

    html[data-lod="high"][data-theme="dark"]
        .header.scroll:not(.menuExpanded):not(.static) {
        opacity: 1;
        background-color: rgba(0, 0, 0, 0.5);
        -webkit-backdrop-filter: blur(25px);
        backdrop-filter: blur(25px);
    }

    .title {
        font-family: "Roboto Serif Variable";
        font-style: normal;
        font-weight: 700;
        font-size: 2.4rem;

        color: var(--primary-01);
    }

    .list .blogButton {
        display: flex;
        padding: 0.5rem 2.25rem;
        width: fit-content;
    }

    .menu {
        position: absolute;
        top: 0;
        left: 0;
        opacity: 0;

        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-between;
        padding: 4.5rem;

        height: calc(100vh - var(--nav-height));
        width: 100%;

        font-family: "Roboto Serif Variable", "Roboto Serif Variable";

        transition: calc(var(--transition) * 2);
        transition-timing-function: cubic-bezier(0.002, 0.82, 0.165, 1);

        transform: translateY(100vh);
        transform-style: preserve-3d;
    }

    .mobile_spacing {
        display: flex;
        height: calc(100lvh - 100svh);
        width: 100%;
    }

    .sectionLine {
        display: none;
    }

    .header.header.menuExpanded {
        background-color: var(--secondary-01);
    }

    .header.menuExpanded .menu {
        position: fixed;
        top: var(--nav-height);

        background-color: var(--secondary-01);
        transform: translateY(0%);
        opacity: 1;
    }

    .header.menuExpanded body {
        overflow-y: hidden;
    }

    .menu .list {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: var(--margin);

        text-transform: capitalize;
        font-weight: 400;
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    @media (min-width: 1024px) {
        .header {
            padding-inline: 12.5rem;
            font-size: 1.6rem;
            height: var(--nav-height);
        }

        .title {
            font-size: 2.4rem;
        }

        .menu .sectionLine {
            display: block;
            position: absolute;

            display: block;
            position: absolute;
            bottom: 2rem;
            left: 0;
            opacity: 0;

            height: 1.5px;
            width: 25px;

            border-radius: 0.2rem;
            background-color: var(--primary-01);

            transition: 0.35s;
        }

        .menu .sectionLine.enabled {
            animation: fadeIn 0.35s 1s forwards;
        }

        .mobile_spacing {
            display: none;
        }

        .menu {
            flex-direction: row;
            justify-content: space-between;
            gap: 5rem;

            position: initial;
            transform: initial;

            width: fit-content;
            height: var(--nav-height);
            padding: 0;

            opacity: 1;
        }

        .menu .list {
            flex-direction: row;
            gap: 5rem;
        }
    }
</style>
